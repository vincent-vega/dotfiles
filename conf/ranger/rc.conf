# Be aware of version control systems and display information.
set vcs_aware true

# Use one of the supported image preview protocols
set preview_images false

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
#
#   This feature relies on the dimensions of the terminal's font.  By default, a
#   width of 8 and height of 11 are used.  To use other values, set the options
#   iterm2_font_width and iterm2_font_height to the desired values.
#
# * terminology:
#   Previews images in full color in the terminology terminal emulator.
#   Supports a wide variety of formats, even vector graphics like svg.
#
# * sixel:
#   Previews images using the SIXEL protocol. This requires "imagemagick".
#
# * urxvt:
#   Preview images in full color using urxvt image backgrounds. This
#   requires using urxvt compiled with pixbuf support.
#
# * urxvt-full:
#   The same as urxvt but utilizing not only the preview pane but the
#   whole terminal window.
#
# * kitty:
#   Preview images in full color using kitty image protocol.
#   Requires python PIL or pillow library.
#   If ranger does not share the local filesystem with kitty
#   the transfer method is changed to encode the whole image;
#   while slower, this allows remote previews,
#   for example during an ssh session.
#   Tmux is unsupported.
#
# * ueberzug:
#   Preview images in full color with the external command "ueberzug".
#   Images are shown by using a child window.
#   Only for users who run X11 in GNU/Linux.
set preview_images_method ueberzug

set preview_files false
set preview_directories false

# Draw borders around columns? (separators, outline, both, or none)
# Separators are vertical lines between columns.
# Outline draws a box around all the columns.
# Both combines the two.
set draw_borders outline

map gD cd /dev
map gd cd ~/Documents
map gk cd ~/Desktop
map gw cd ~/Downloads

map du eval import subprocess; fm.execute_command('du -Ahd 1 | sort -fk2', flags='p') if subprocess.check_output(["uname", "-o"]).decode('utf-8').strip() == "Darwin" else fm.execute_command('du -h --apparent-size -d 1 | sort -k2', flags='p')
map dU eval import subprocess; fm.execute_command('du -Ahd 1 | sort -rh', flags='p') if subprocess.check_output(["uname", "-o"]).decode('utf-8').strip() == "Darwin" else fm.execute_command('du -h --apparent-size -d 1 | sort -rh', flags='p')

# smart cw: use bulkrename if multiple files have been selected
map cw eval fm.execute_console("bulkrename") if fm.thisdir.marked_items else fm.open_console("rename ")

# fuzzy find
map <C-f> fzf_select
# filter-as-you-type "f": mimics the behaviour of find, but filtering files as you type
map f console scout -aeflst%space

# drag and drop
#map <C-x> shell dragon-drop -a -x %p
map <C-x> open_drop

default_linemode devicons
