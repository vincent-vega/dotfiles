# shellcheck shell=bash
if [ -z "$PS1" ]; then
    return
fi

case $(uname -s) in
    Linux*)  __arch=Linux;;
    CYGWIN*) __arch=Cygwin;;
    *)       __arch=Linux;;
esac

# sudo autocompletion
complete -cf sudo
# enable bash completion in interactive shells
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        # shellcheck disable=SC1091
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        # shellcheck disable=SC1091
        . /etc/bash_completion
    fi
fi

# Make bash check its window size after a process completes
shopt -s checkwinsize

case $TERM in
    xterm* | aterm | rxvt | screen )
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    * )
        ;;
esac

if [ -f ~/.bash_aliases ]; then
    # shellcheck disable=SC1090
    . ~/.bash_aliases
fi

if [ -f ~/dotfiles/bash/ps1_colors ]; then
    # shellcheck disable=SC1090
    . ~/dotfiles/bash/ps1_colors
fi

# shellcheck disable=SC2154
PS1="\[${BGrey27}\][\[${DodgerBlue2}\]\u\[${BGrey27}\]]\[${White}\]@\
\[${BGrey27}\][\[${Red}\]\h\[${BGrey27}\]]\[${White}\] \A\
 \[${PaleGreen3}\]\w\r\n\[${ResetColor}\]# \
"

if [ -f ~/dotfiles/bash/ls_colors ]; then
    # shellcheck disable=SC1090
    . ~/dotfiles/bash/ls_colors
fi

#bd = block (buffered) special file
#cd = character (unbuffered) special file
#di = directory
#do = door
#ec = endcode - Non-filename text
#ex = file which is executable (ie. has 'x' set in permissions).
#fi = file
#lc = leftcode - Opening terminal code
#ln = symbolic link
#mi = non-existent file pointed to by a symbolic link (visible when you type ls -l)
#no = normal
#or = symbolic link pointing to a non-existent file (orphan)
#ow = other writable - Directory that is other-writable (o+w) and not sticky
#pi = fifo file (pipe)
#rc = rightcode - Closing terminal code
#sg = set gid - File that is setgid (g+s)
#so = socket file
#st = sticky - Directory with the sticky bit set (+t) and not other-writable
#su = set uid - File that is setuid (u+s)
#tw = sticky other writable - Directory that is sticky and other-writable (+t,o+w)

DIR=${PaleGreen3}
SYM_LINK=${LightSkyBlue3}
EXE=${BIndianRed}
CHAR_SP=${BYellow}
BLOCK_SP=${BYellow}
STICKY_OW=${RTurquoise2}
MISSING_LN=${RIndianRed}

LS_COLORS="di=${DIR}:ln=${SYM_LINK}:ex=${EXE}:cd=${CHAR_SP}:bd=${BLOCK_SP}:\
tw=${STICKY_OW}:mi=${MISSING_LN}"
export LS_COLORS
export GREP_COLORS='mt='${SkyBlue3}':ms='${SkyBlue3}':mc='${SkyBlue3}':fn='${Khaki1}

export HISTFILESIZE=20000
export HISTSIZE=10000
export HISTIGNORE='&:l[sla]:cd:..:...:....:.....:......:.......:........:.........:..........:...........:cd -:[bf]g:jobs:exit:history:make:make clean:vim'
export HISTCONTROL=erasedups
export http_proxy=

export MAVEN_OPTS="-Djansi.passthrough=true $MAVEN_OPTS" #colorize maven output
export M2_HOME=/opt/apache-maven-3.6.0
export M2=$M2_HOME/bin

#export JAVA_HOME=/opt/java-jdk/jdk1.8.0_121_x64
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export CATALINA_HOME=/opt/tomcat
export PATH=$M2:$PATH

export VISUAL=vim
export EDITOR="$VISUAL"
export SVN_EDITOR="$VISUAL"

# -----------------------------------------------------------------------------

# host-info

# nslookup
# host
# dig

if [ $__arch = "Cygwin" ]; then

    # add cygwin context menu entry
    # chere -in -e "Open Bash window here" -t mintty

    __ssh_host_completion() {
        local cur opts
        cur="${COMP_WORDS[COMP_CWORD]}"
        opts=$(grep '^Host' ~/.ssh/config ~/.ssh/config.d/* 2>/dev/null | grep -v '[?*]' | cut -d ' ' -f 2-)
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return 0
    }
    complete -F __ssh_host_completion ssh
fi

open() {
    if [ $__arch = "Cygwin" ]; then
        #/cygdrive/c/WINDOWS/explorer.exe /e, `cygpath -w "$1"`
        cygstart "$1"
    elif [ $__arch = "Linux" ]; then
        local target
        target="$(pwd)"
        if [ "$#" -eq 1 ]; then
            if [ ! -d "$1" ]; then
                echo "Target path is not a directory"
                echo "Usage: ${FUNCNAME[0]} [PATH]"
                return 1
            fi
            target="$1"
        elif [ "$#" -gt 1 ]; then
            echo "Usage: ${FUNCNAME[0]} [PATH]"
            return 2
        fi
        nautilus --browser "$target" > /dev/null 2>&1 &
    fi
}

echoline() {
    if [ "$#" -ne 2 ]; then
        echo 1>&2 "Echo specific file line"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    if [ ! -f "$1" ]; then
        echo 1>&2 "File not found: $1"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    if [[ ! "$2" =~ ^[0-9]+$ ]]; then
        echo 1>&2 "Invalid line number: $2"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    head -n "$2" "$1" | tail -n +"$2"
}

# {{{ Subversion

sup() { svn up "$@"; }

sst() { svn st "$@"; }

sdiff() {
    svn diff -x -w -x --ignore-eol-style "$@" | vim -R - +"file svn-diff" -c "set nowrap"
}

ssync() {
    svn diff -r BASE:HEAD "$@" | vim -R - +"file svn-sync" -c "set nowrap"
}

svnstash() {
    if [ "$#" -lt 1 ]; then
        echo "Print current developments patch"
        echo "Usage: ${FUNCNAME[0]} PATH..."
        return 1
    fi
    local unversioned
    unversioned=$(svn status "$@" | grep "^?" | sed -r 's/^\? +//')

    if [ -n "$unversioned" ]; then
        local tmp_file
        tmp_file=$(mktemp --tmpdir)
        echo "Created temp file $tmp_file" 1>&2
        # logging unversioned files to tmp_file
        echo "$unversioned" > "$tmp_file"
        # adding unversioned files
        xargs -r -d '\n' svn add < "$tmp_file" 1>&2
    fi

    svn diff "$@"

    if [ -f "$tmp_file" ]; then
        # removing unversioned files
        xargs -r -d '\n' svn delete --keep-local < "$tmp_file" 1>&2
        # clean
        rm -f "$tmp_file"
        echo "Temp file removed" 1>&2
    fi
}

svnhistory() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH"
        return 1
    fi
    local url
    url="$1"
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -n | {
        local add="\o33\[0;38;5;110m"
        local rem="\o33\[0;38;5;167m"
        local head="\o33\[0;38;5;228m"
        local rev="\o33\[1;38;5;244m"
        local reset="\o33[0m"
        # first revision as full text
        read -r r
        svn log -r"$r" "$url"@HEAD | sed "s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
        svn cat -r"$r" "$url"@HEAD
        while read -r r; do
            echo
            svn log --diff -r"$r" "$url"@HEAD | \
                sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                    s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                    s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                    s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
        done
    }
}

svnhistoryr() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH"
        return 1
    fi
    local url
    url="$1"
    first=$(svn log -r 1:HEAD --limit 1 -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2-)
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -rn | {
        local add="\o33\[0;38;5;110m"
        local rem="\o33\[0;38;5;167m"
        local head="\o33\[0;38;5;228m"
        local rev="\o33\[1;38;5;244m"
        local reset="\o33[0m"
        while read -r r; do
            echo
            if [ "$r" == "$first" ]; then
                # first revision as full text
                svn log -r"$r" "$url"@HEAD | sed "s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
                svn cat -r"$r" "$url"@HEAD
            else
                svn log --diff -r"$r" "$url"@HEAD | \
                    sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                       s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                       s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                       s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
            fi
        done
    }
}

svnactivity() {
    if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
        echo "Usage: ${FUNCNAME[0]} USERNAME HISTORY_SIZE [PATH]"
        return 1
    fi
    local committername="$1"
    local numcommit="$2"
    local svnpath revisions
    svnpath=$(pwd)
    if [ "$#" -eq 3 ]; then
        svnpath="$3"
    fi
    revisions=$(svn log -q -l "$numcommit" "$svnpath" | "grep" "$committername" | "grep" -E -o 'r[0-9]+')
    if [ "$revisions" == "" ]; then
        echo "No commits found"
        return 2
    fi
    echo "$(echo "$revisions" | wc -l) commits found"
    echo "$revisions" | {
        local add="\o33\[0;38;5;110m"
        local rem="\o33\[0;38;5;167m"
        local head="\o33\[0;38;5;228m"
        local rev="\o33\[1;38;5;244m"
        local reset="\o33[0m"
        while read -r ver; do
            svn log -"$ver" --diff "$svnpath" | \
                sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                    s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                    s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                    s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
        done
    }
}

# }}}

# {{{ Git

gst() { git status "$@"; }

# }}}

ff() {
    if [ "$#" -eq 0 ]; then
        # current directory
        find . -type f -exec sh -c 'ls -lh "$@"' -- {} + | cat -n
    elif [ "$#" -eq 1 ]; then
        if [ -d "$1" ]; then
            # directory
            echo "Listing files in dir $1"
            find "$1" -type f -exec sh -c 'ls -lh "$@"' -- {} + | cat -n
        else
            find . -type f -iname '*'"$1"'*' -exec sh -c 'ls -lh "$@"' -- {} + | cat -n | grep -i "$1"
        fi
    elif [ "$#" -gt 1 ]; then
        find "$1" -type f -iname '*'"$2"'*' -exec sh -c 'ls -lh "$@"' -- {} + | cat -n | grep -i "$2"
    fi
}

fd() {
    if [ "$#" -eq 0 ]; then
        find . -type d | cat -n
    elif [ "$#" -eq 1 ]; then
        find . -type d -iname '*'"$1"'*' | cat -n | grep -i "$1"
    elif [ "$#" -gt 1 ]; then
        find "$1" -type d -iname '*'"$2"'*' | cat -n | grep -i "$2"
    fi
}

rmalljarsign() {
    for file in *jar; do
        echo "$file"
        zip -d "$file" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

rmjarsign() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: ${FUNCNAME[0]} JAR_FILE..."
        return 1
    fi
    for jarfile in "$@"; do
        if [ ! -f "$jarfile" ]; then
            echo "File $jarfile does not exist"
            continue
        fi
        zip -d "$jarfile" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

xml() {
    xmllint --format "$1" | pygmentize -l xml | less
}

colortest() {
    for clbg in {40..47} {100..107} 49 ; do
        #Foreground
        for clfg in {30..37} {90..97} 39 ; do
            #Formatting
            for attr in 0 1 2 4 5 7 ; do
                #Print the result
                echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
            done
            echo
        done
    done
}

colortest256() {
    for fgbg in 38 48 ; do #Foreground/Background
        for color in {0..256} ; do #Colors
            #Display the color
            echo -en "\e[${fgbg};5;${color}m ${color}\t\e[0m"
            #Display 10 colors per lines
            if [ $(((color + 1) % 6)) == 0 ]; then
                echo
            fi
        done
        echo
    done
}

colordiff() {
    local add="\o33\[0;38;5;74m"
    local rem="\o33\[0;38;5;167m"
    local head="\o33\[1;38;5;228m"
    local rev="\o33\[1;38;5;244m"
    local reset="\o33[0m"
    local diff
    while read -r line; do
        diff="$diff\n$(echo "$line" | sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                                           s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                                           s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                                           s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/")"
    done
    echo -e "$diff"
}
