# shellcheck shell=bash
if [ -z "$PS1" ]; then
   return
fi

case $(uname -s) in
    Linux*)    arch=Linux;;
    CYGWIN*)   arch=Cygwin;;
    *)         arch=Linux;;
esac

# sudo autocompletion
if [ "$PS1" ]; then
    complete -cf sudo
fi

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Make bash check its window size after a process completes
shopt -s checkwinsize

case $TERM in
    xterm* | aterm | rxvt | screen )
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    * )
        ;;
esac

if [ -f ~/.bash_aliases ]; then
    # shellcheck source=dotfiles/bash/bash_aliases
    . ~/.bash_aliases
fi

### Set
#0 = default colour
#1 = bold
#2 = dim
#4 = underlined
#5 = flashing/blink text
#7 = reverse field
#8 = hidden (useful for passwords)

### Foreground
#30 = black
#31 = red
#32 = green
#33 = orange
#34 = blue
#35 = purple
#36 = cyan
#37 = grey
#39 = default foreground color
#90 = dark grey
#91 = light red
#92 = light green
#93 = yellow
#94 = light blue
#95 = light purple
#96 = turquoise
#97 = white

### Background
#40  = black background
#41  = red background
#42  = green background
#43  = orange background
#44  = blue background
#45  = purple background
#46  = cyan background
#47  = grey background
#49  = default background color
#100 = dark grey background
#101 = light red background
#102 = light green background
#103 = yellow background
#104 = light blue background
#105 = light purple background
#106 = turquoise background
#107 = white background

ResetColor='\e[0m'

# High Intensty
#IBlack='\e[0;49;90m'
IRed='\e[0;49;91m'
#IGreen='\e[0;49;92m'
#IYellow='\e[0;49;93m'
#IBlue='\e[0;49;94m'
#IPurple='\e[0;49;95m'
#ICyan='\e[0;49;96m'
IWhite='\e[0;49;97m'

IDodgerBlue3='\e[0;38;5;26m'
IPaleGreen3='\e[0;38;5;114m'

# Bold High Intensty
BIBlack='\e[1;49;90m'
#BIRed='\e[1;49;91m'
#BIGreen='\e[1;49;92m'
#BIYellow='\e[1;49;93m'
#BIBlue='\e[1;49;94m'
#BIPurple='\e[1;49;95m'
#BICyan='\e[1;49;96m'
#BIWhite='\e[1;49;97m'

# Underline High Intensty
#UIBlack='\e[4;49;90m'
#UIRed='\e[4;49;91m'
#UIGreen='\e[4;49;92m'
#UIYellow='\e[4;49;93m'
#UIBlue='\e[4;49;94m'
#UIPurple='\e[4;49;95m'
#UICyan='\e[4;49;96m'
#UIWhite='\e[4;49;97m'

PS1="\[${BIBlack}\][\[${IDodgerBlue3}\]\u\[${BIBlack}\]]\[${IWhite}\]@\
\[${BIBlack}\][\[${IRed}\]\h\[${BIBlack}\]]\[${IWhite}\] \A\
 \[${IPaleGreen3}\]\w\r\n\[${ResetColor}\]# \
"

# High Intensty
#IBlack='0;90'
#IRed='0;91'
#IGreen='0;92'
#IYellow='0;93'
#IBlue='0;94'
#IPurple='0;95'
#ICyan='0;96'
#IWhite='0;97'

IPaleGreen3='0;38;5;114'
IKhaki1='0;38;5;228'
ILightSkyBlue3='0;38;5;110'
ISkyBlue3='0;38;5;74'

# Bold High Intensty
#BIBlack='1;90'
#BIRed='1;91'
#BIGreen='1;92'
BIYellow='1;93'
#BIBlue='1;94'
#BIPurple='1;95'
#BICyan='1;96'
#BIWhite='1;97'

BIndianRed='1;38;5;167'

# Underline High Intensty
#UIBlack='4;90'
#UIRed='4;91'
#UIGreen='4;92'
#UIYellow='4;93'
#UIBlue='4;94'
#UIPurple='4;95'
#UICyan='4;96'
#UIWhite='4;97'

# Reversed High Intensty
#RIBlack='7;90'
#RIRed='7;91'
#RIGreen='7;92'
#RIYellow='7;93'
RIBlue='7;94'
#RIPurple='7;95'
RICyan='7;96'
#RIWhite='7;97'

DIR=${IPaleGreen3}
SYM_LINK=${ILightSkyBlue3}
EXE=${BIndianRed}
CHAR_SP=${BIYellow}
BLOCK_SP=${BIYellow}
STICKY_OW=${RICyan}
MISSING_LN=${RIBlue}

#bd = block (buffered) special file
#cd = character (unbuffered) special file
#di = directory
#do = door
#ec = endcode - Non-filename text
#ex = file which is executable (ie. has 'x' set in permissions).
#fi = file
#lc = leftcode - Opening terminal code
#ln = symbolic link
#mi = non-existent file pointed to by a symbolic link (visible when you type ls -l)
#no = normal
#or = symbolic link pointing to a non-existent file (orphan)
#ow = other writable - Directory that is other-writable (o+w) and not sticky
#pi = fifo file (pipe)
#rc = rightcode - Closing terminal code
#sg = set gid - File that is setgid (g+s)
#so = socket file
#st = sticky - Directory with the sticky bit set (+t) and not other-writable
#su = set uid - File that is setuid (u+s)
#tw = sticky other writable - Directory that is sticky and other-writable (+t,o+w)

LS_COLORS="di=${DIR}:ln=${SYM_LINK}:ex=${EXE}:cd=${CHAR_SP}:bd=${BLOCK_SP}:\
tw=${STICKY_OW}:mi=${MISSING_LN}"
export LS_COLORS
export GREP_COLORS='mt='${ISkyBlue3}':ms='${ISkyBlue3}':mc='${ISkyBlue3}':fn='${IKhaki1}

export HISTFILESIZE=20000
export HISTSIZE=10000
export HISTIGNORE='&:l[sla]:cd:..:...:....:.....:......:.......:........:.........:..........:...........:cd -:[bf]g:jobs:exit:history:make:make clean:vim'
export HISTCONTROL=erasedups
export http_proxy=

export MAVEN_OPTS="-Djansi.passthrough=true $MAVEN_OPTS" #colorize maven output
export M2_HOME=/opt/apache-maven-3.6.0
export M2=$M2_HOME/bin

#export JAVA_HOME=/opt/java-jdk/jdk1.8.0_121_x64
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export CATALINA_HOME=/opt/tomcat
export PATH=$M2:$PATH

export VISUAL=vim
export EDITOR="$VISUAL"

# -----------------------------------------------------------------------------

# host-info

# nslookup
# host
# dig

#if [ $arch = "Cygwin" ]; then
    # add cygwin context menu entry
    # chere -in -e "Open Bash window here" -t mintty
#fi

open() {
    if [ $arch = "Cygwin" ]; then
        #/cygdrive/c/WINDOWS/explorer.exe /e, `cygpath -w "$1"`
        cygstart "$1"
    elif [ $arch = "Linux" ]; then
        local target
        target="$(pwd)"
        if [ "$#" -eq 1 ]; then
            if [ ! -d "$1" ]; then
                echo "Target path is not a directory"
                echo "Usage: ${FUNCNAME[0]} [PATH]"
                return 1
            fi
            target="$1"
        elif [ "$#" -gt 1 ]; then
            echo "Usage: ${FUNCNAME[0]} [PATH]"
            return 2
        fi
        nautilus --browser "$target" > /dev/null 2>&1 &
    fi
}

# {{{ Subversion

sup() { svn up "$@"; }

sst() { svn st "$@"; }

sdiff() {
    svn diff -x -w -x --ignore-eol-style "$@" | vim -R - +"file svn-diff" -c "set nowrap"
}

ssync() {
    svn diff -r BASE:HEAD "$@" | vim -R - +"file svn-sync" -c "set nowrap"
}

svnsnapshot() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} [PATCH_FILE]"
        return 1
    elif [ -f "$1" ]; then
        echo "The file already exists, do you wish to overwrite it?"
        select yn in "Yes" "No"; do
            case $yn in
                Yes ) break;;
                No ) echo "Aborting..."; return 2;;
            esac
        done
    elif [ -d "$1" ]; then
        echo "Patch file cannot be a directory"
        echo "Usage: ${FUNCNAME[0]} [PATCH_FILE]"
        return 3
    fi
    local tmp_file
    tmp_file=$(mktemp --tmpdir)
    # logging unversioned files to tmp_file
    svn status | grep "^?" | sed -r 's/^\? +//' > "$tmp_file"
    # adding unversioned files
    xargs -r -d '\n' svn add < "$tmp_file"
    # creating the patch
    svn diff > "$1"
    # removing unversioned files
    xargs -r -d '\n' svn rm --keep-local < "$tmp_file"
    # clean
    rm -f "$tmp_file"
}

svnhistory() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} [PATH]"
        return 1
    fi
    local url="$1"
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -n | {
        local add="\o33\[0;38;5;110m"
        local rem="\o33\[0;38;5;167m"
        local head="\o33\[0;38;5;228m"
        local rev="\o33\[1;38;5;244m"
        local reset="\o33[0m"
        # first revision as full text
        read -r r
        svn log -r"$r" "$url"@HEAD | sed "s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
        svn cat -r"$r" "$url"@HEAD
        while read -r r; do
            echo
            svn log --diff -r"$r" "$url"@HEAD | \
                sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                    s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                    s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                    s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
        done
    }
}

svnhistoryr() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} [PATH]"
        return 1
    fi
    local url="$1"
    first=$(svn log -r 1:HEAD --limit 1 -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2-)
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -rn | {
        local add="\o33\[0;38;5;110m"
        local rem="\o33\[0;38;5;167m"
        local head="\o33\[0;38;5;228m"
        local rev="\o33\[1;38;5;244m"
        local reset="\o33[0m"
        while read -r r; do
            echo
            if [ "$r" == "$first" ]; then
                # first revision as full text
                svn log -r"$r" "$url"@HEAD | sed "s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
                svn cat -r"$r" "$url"@HEAD
            else
                svn log --diff -r"$r" "$url"@HEAD | \
                    sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                       s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                       s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                       s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
            fi
        done
    }
}

# }}}

ff() {
    if [ "$#" -eq 0 ]; then
        # current directory
        find . -type f -exec sh -c 'ls -lh "$@"' -- {} + | cat -n
    elif [ "$#" -eq 1 ]; then
        if [ -d "$1" ]; then
            # directory
            find "$1" -type f | cat -n
        else
            find . -type f -iname '*'"$1"'*' -exec sh -c 'ls -lh "$@"' -- {} + | cat -n | grep -i "$1"
        fi
    elif [ "$#" -gt 1 ]; then
        find "$1" -type f -iname '*'"$2"'*' -exec sh -c 'ls -lh "$@"' -- {} + | cat -n | grep -i "$2"
    fi
}

fd() {
    if [ "$#" -eq 0 ]; then
        find . -type d | cat -n
    elif [ "$#" -eq 1 ]; then
        find . -type d -iname '*'"$1"'*' | cat -n | grep -i "$1"
    elif [ "$#" -gt 1 ]; then
        find "$1" -type d -iname '*'"$2"'*' | cat -n | grep -i "$2"
    fi
}

rmalljarsign() {
    for file in *jar; do
        echo "$file"
        zip -d "$file" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

rmjarsign() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: ${FUNCNAME[0]} [JAR_FILE]..."
        return 1
    fi
    for jarfile in "$@"; do
        if [ ! -f "$jarfile" ]; then
            echo "File $jarfile does not exist"
            continue
        fi
        zip -d "$jarfile" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

xml() {
    xmllint --format "$1" | pygmentize -l xml | less
}

colortest() {
    for clbg in {40..47} {100..107} 49 ; do
        #Foreground
        for clfg in {30..37} {90..97} 39 ; do
            #Formatting
            for attr in 0 1 2 4 5 7 ; do
                #Print the result
                echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
            done
            echo
        done
    done
}

colortest256() {
    for fgbg in 38 48 ; do #Foreground/Background
        for color in {0..256} ; do #Colors
            #Display the color
            echo -en "\e[${fgbg};5;${color}m ${color}\t\e[0m"
            #Display 10 colors per lines
            if [ $(((color + 1) % 10)) == 0 ]; then
                echo
            fi
        done
        echo
    done
}

colordiff() {
    local add="\o33\[0;38;5;74m"
    local rem="\o33\[0;38;5;167m"
    local head="\o33\[1;38;5;228m"
    local rev="\o33\[1;38;5;244m"
    local reset="\o33[0m"
    local diff=""
    while read -r r; do
        diff="$diff\n$(echo "$r" | sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                                        s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                                        s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                                        s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/")"
    done
    echo -e "$diff"
}
