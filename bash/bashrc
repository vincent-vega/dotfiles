# shellcheck shell=bash
[ -z "$PS1" ] && return

case $(uname -s) in
    Darwin*) __os_family=Mac;;
    Linux*)  __os_family=Linux;;
    CYGWIN*) __os_family=Cygwin;;
    *)       __os_family=Linux;;
esac

shopt -s autocd cdspell checkwinsize histappend

case $TERM in
    xterm* | aterm | rxvt | screen )
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    * )
        ;;
esac

# sudo autocompletion
complete -cf sudo
# enable bash completion in interactive shells
if ! shopt -oq posix; then
    if [ -s /usr/share/bash-completion/bash_completion ]; then
        source /usr/share/bash-completion/bash_completion
    elif [ -s /etc/bash_completion ]; then
        # shellcheck source=/dev/null
        source /etc/bash_completion
    fi
fi

if [ -s "$HOME/dotfiles/bash/bash_aliases" ]; then
    source "$HOME/dotfiles/bash/bash_aliases"
fi

if [ -s "$HOME/dotfiles/bash/ps1_colors" ]; then
    source "$HOME/dotfiles/bash/ps1_colors"
fi

PS1="\[${BGrey27}\][\[${DodgerBlue2}\]\u\[${BGrey27}\]]\[${White}\]@\
\[${BGrey27}\][\[${Red}\]\h\[${BGrey27}\]]\[${White}\] \A\
 \[${PaleGreen3}\]\w\r\n\[${ResetColor}\]# \
"

if [ -s "$HOME/dotfiles/bash/env" ]; then
    source "$HOME/dotfiles/bash/env"
fi

if [ -f "$HOME/.fzf.bash" ]; then
    source "$HOME/.fzf.bash"
    _fzf_setup_completion 'dir'  fd ff
    _fzf_setup_completion 'path' la ll lt vd vimdiff
fi

# -----------------------------------------------------------------------------

if [ $__os_family = "Cygwin" ]; then
    __ssh_host_completion() {
        local cur opts
        cur="${COMP_WORDS[COMP_CWORD]}"
        opts=$(grep '^Host' "$HOME"/.ssh/config "$HOME"/.ssh/config.d/* 2> /dev/null | grep -v '[?*]' | cut -d ' ' -f 2-)
        #COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        mapfile -t COMPREPLY < <( compgen -W "$opts" -- "$cur" )
        return 0
    }
    complete -F __ssh_host_completion ssh
fi

open() {
    if [ $__os_family = "Cygwin" ]; then
        #/cygdrive/c/WINDOWS/explorer.exe /e, `cygpath -w "$1"`
        cygstart "$1"
    elif [ $__os_family = "Linux" ]; then
        local target
        target="$(pwd)"
        if [ "$#" -eq 1 ]; then
            if [ ! -d "$1" ]; then
                echo "Target path is not a directory"
                echo "Usage: ${FUNCNAME[0]} [PATH]"
                return 1
            fi
            target="$1"
        elif [ "$#" -gt 1 ]; then
            echo "Usage: ${FUNCNAME[0]} [PATH]"
            return 2
        fi
        nautilus --browser "$target" > /dev/null 2>&1 &
    fi
}

echoline() {
    if [ "$#" -ne 2 ]; then
        echo 1>&2 "Echo specific file line"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    if [ ! -f "$1" ]; then
        echo 1>&2 "File not found: $1"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    if [[ ! "$2" =~ ^[0-9]+$ ]]; then
        echo 1>&2 "Invalid line number: $2"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    head -n "$2" "$1" | tail -n +"$2"
}

# {{{ Subversion

sup() { svn up "$@"; }

sst() { svn st "$@"; }

sdiff() {
    svn diff -x -w -x --ignore-eol-style "$@" | vim -R -n - +"file svn-diff" -c "set nowrap"
}

ssync() {
    svn diff -r BASE:HEAD "$@" | vim -R -n - +"file svn-sync" -c "set nowrap"
}

svnstash() {
    if [ "$#" -lt 1 ]; then
        echo "Print current developments patch"
        echo "Usage: ${FUNCNAME[0]} PATH..."
        return 1
    fi
    local unversioned
    unversioned=$(svn status "$@" | grep "^?" | sed -r 's/^\? +//')

    if [ -n "$unversioned" ]; then
        local tmp_file
        tmp_file=$(mktemp --tmpdir)
        echo "Created temp file $tmp_file" 1>&2
        # logging unversioned files to tmp_file
        echo "$unversioned" > "$tmp_file"
        # adding unversioned files
        xargs -r -d '\n' svn add < "$tmp_file" 1>&2
    fi

    svn diff "$@"

    if [ -s "$tmp_file" ]; then
        # removing unversioned files
        xargs -r -d '\n' svn delete --keep-local < "$tmp_file" 1>&2
        # clean
        rm -f "$tmp_file"
        echo "Temp file removed" 1>&2
    fi
}

svnhistory() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH"
        return 1
    fi
    local url
    url="$1"
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -n | {
        # first revision as full text
        read -r r
        svn log -r"$r" "$url"@HEAD
        svn cat -r"$r" "$url"@HEAD
        while read -r r; do
            echo
            svn log --diff -r"$r" "$url"@HEAD
        done
    }
}

ssvnhistory() {
    local add="\o33\[0;38;5;110m" rem="\o33\[0;38;5;167m" \
          head="\o33\[0;38;5;228m" rev="\o33\[1;38;5;244m" reset="\o33[0m"
    svnhistory "$@" | sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                           s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                           s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                           s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
}

svnhistoryr() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH"
        return 1
    fi
    local url
    url="$1"
    first=$(svn log -r 1:HEAD --limit 1 -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2-)
    if [ ! "$first" ]; then
        return 1
    fi
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -rn | {
        while read -r r; do
            echo
            if [ "$r" == "$first" ]; then
                # first revision as full text
                svn log -r"$r" "$url"@HEAD
                svn cat -r"$r" "$url"@HEAD
            else
                svn log --diff -r"$r" "$url"@HEAD
            fi
        done
    }
}

ssvnhistoryr() {
    local add="\o33\[0;38;5;110m" rem="\o33\[0;38;5;167m" \
          head="\o33\[0;38;5;228m" rev="\o33\[1;38;5;244m" reset="\o33[0m"
    svnhistoryr "$@" | sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                            s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                            s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                            s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
}

svnactivity() {
    if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
        echo "Print the last NUM commits"
        echo "Usage: ${FUNCNAME[0]} USERNAME NUM [PATH]"
        return 1
    fi
    local committername="$1" numcommit="$2" pagesize=200 svnpath revisions \
          high low
    svnpath=$(pwd)
    if [ "$#" -eq 3 ]; then
        svnpath="$3"
    fi
    local -a commits
    high=$(svn info "$svnpath" | "grep" "Last Changed Rev" | "grep" -E -o '[0-9]+')
    if [ ! "$high" ]; then
        return 1
    fi
    while [ ${#commits[@]} -lt "$numcommit" ] && [ "$high" -ge 0 ]; do
        low=$((high - pagesize))
        if [ $low -lt 0 ]; then # TODO check lower than 0
            low=0
        fi
        revisions=$(svn log -q -r "$high":"$low" "$svnpath" | "grep" "$committername" | "grep" -E -o '^r[0-9]+')
        for r in $revisions; do
            commits+=("$r")
        done
        high=$((low - 1))
    done
    for i in $(seq "$numcommit" 1 ${#commits[@]}); do
        unset "commits[$i]"
    done
    # TODO reverse commit array
    echo "Found commits: ${commits[*]}"
    # shellcheck disable=SC2048
    for c in ${commits[*]}; do
        svn log -"$c" --diff "$svnpath"
    done
}

ssvnactivity() {
    local add="\o33\[0;38;5;110m" rem="\o33\[0;38;5;167m" \
          head="\o33\[0;38;5;228m" rev="\o33\[1;38;5;244m" reset="\o33[0m"
    svnactivity "$@" | sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                            s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                            s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                            s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/"
}

# }}}

# {{{ Git

gst() { git status "$@"; }

gunstage() { git restore --staged "$@"; }

# }}}

ff() {
    local grep_pattern
    if [ "$#" -eq 0 ]; then
        # current directory
        find . -type f -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n
    elif [ "$#" -eq 1 ]; then
        if [ -d "$1" ]; then
            # directory
            echo "Listing files in dir $1"
            find "$1" -type f -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n
        else
            grep_pattern=$(echo "$1" | sed 's/*\+/*/g' | sed 's/*/.*/g')
            find . -type f -iname '*'"$1"'*' -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n | grep -E -i "$grep_pattern"
        fi
    elif [ "$#" -gt 1 ]; then
        if [ ! -d "$1" ]; then
            echo "Target path is not a directory: $1"
            return 1
        fi
        grep_pattern=$(echo "$2" | sed 's/*\+/*/g' | sed 's/*/.*/g')
        find "$1" -type f -iname '*'"$2"'*' -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n | grep -E -i "$grep_pattern"
    fi
}

fd() {
    if [ "$#" -eq 0 ]; then
        find . -type d | cat -n
    elif [ "$#" -eq 1 ]; then
        find . -type d -iname '*'"$1"'*' | cat -n | grep -i "$1"
    elif [ "$#" -gt 1 ]; then
        if [ ! -d "$1" ]; then
            echo "Target path is not a directory: $1"
            return 1
        fi
        find "$1" -type d -iname '*'"$2"'*' | cat -n | grep -i "$2"
    fi
}

rmalljarsign() {
    for file in *jar; do
        echo "$file"
        zip -d "$file" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

rmjarsign() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: ${FUNCNAME[0]} JAR_FILE..."
        return 1
    fi
    for jarfile in "$@"; do
        if [ ! -f "$jarfile" ]; then
            echo "File $jarfile does not exist"
            continue
        fi
        zip -d "$jarfile" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

xml() {
    xmllint --format "$1" | pygmentize -l xml | less
}

colortest() {
    for clbg in {40..47} {100..107} 49 ; do
        #Foreground
        for clfg in {30..37} {90..97} 39 ; do
            #Formatting
            for attr in 0 1 2 4 5 7 ; do
                #Print the result
                local modifier
                if [ $__os_family = "Mac" ]; then
                    modifier="\033"
                else
                    modifier="\e"
                fi
                echo -en "${modifier}[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m ${modifier}[0m"
            done
            echo
        done
    done
}

colortest256() {
    for fgbg in 38 48 ; do #Foreground/Background
        for color in {0..256} ; do #Colors
            local modifier
            if [ $__os_family = "Mac" ]; then
                modifier="\033"
            else
                modifier="\e"
            fi
            #Display the color
            echo -en "${modifier}[${fgbg};5;${color}m ${color}\t${modifier}[0m"
            #Display 10 colors per lines
            if [ $(((color + 1) % 6)) == 0 ]; then
                echo
            fi
        done
        echo
    done
}

colordiff() {
    local add="\o33\[0;38;5;74m" rem="\o33\[0;38;5;167m" \
          head="\o33\[1;38;5;228m" rev="\o33\[1;38;5;244m" reset="\o33[0m" diff
    while read -r line; do
        diff="$diff\n$(echo "$line" | sed "s/^\(+\{1\}\([^+].*$\|$\)\)/$add\1$reset/; \
                                           s/^\(-\{1\}\([^-].*$\|$\)\)/$rem\1$reset/; \
                                           s/^\(@@ .\+ @@\)$/$rev\1$reset/; \
                                           s/^\([+-]\{3\} .\+\|-\{4,\}\|=\+\)$/$head\1$reset/")"
    done
    echo -e "$diff"
}
