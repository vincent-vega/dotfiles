# shellcheck shell=bash
[ -z "$PS1" ] && return

case $(uname -s) in
    Darwin*) __os_family=Mac;;
    Linux*)  __os_family=Linux;;
    CYGWIN*) __os_family=Cygwin;;
    *)       __os_family=Linux;;
esac

shopt -s autocd cdspell checkwinsize histappend

# sudo autocompletion
complete -cf sudo
# enable bash completion in interactive shells
if ! shopt -oq posix; then
    if [ -s /usr/share/bash-completion/bash_completion ]; then
        # shellcheck source=/dev/null
        source /usr/share/bash-completion/bash_completion
    elif [ -s /etc/bash_completion ]; then
        # shellcheck source=/dev/null
        source /etc/bash_completion
    fi
fi

if [ -s "$HOME/dotfiles/bash/bash_aliases" ]; then
    source "$HOME/dotfiles/bash/bash_aliases"
fi

if [ -s "$HOME/dotfiles/bash/ps1_colors" ]; then
    source "$HOME/dotfiles/bash/ps1_colors"
fi

PS1="\[${BGrey27}\][\[${DodgerBlue1}\]\u\[${BGrey27}\]]\[${White}\]@\
\[${BGrey27}\][\[${Red}\]\h\[${BGrey27}\]]\[${White}\] \A\
 \[${PaleGreen3}\]\w\r\n\[${ResetColor}\]# \
"

if [ -s "$HOME/dotfiles/bash/env" ]; then
    source "$HOME/dotfiles/bash/env"
fi

if command -v fzf &>/dev/null; then
    eval "$(fzf --bash)"
    _fzf_setup_completion 'dir'  fd ff
    _fzf_setup_completion 'path' cmp cp jq la ll ln lt mv vimdiff
    if [ "$__os_family" = "Mac" ]; then
        _fzf_setup_completion 'path' pbcopy
    fi
fi

if [ "$__os_family" = "Cygwin" ]; then
    __ssh_host_completion() {
        local cur opts
        cur="${COMP_WORDS[COMP_CWORD]}"
        opts=$(grep '^Host' "$HOME/.ssh/config" "$HOME/.ssh/config.d"/* 2>/dev/null | grep -v '[?*]' | cut -d ' ' -f 2-)
        #COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        mapfile -t COMPREPLY < <( compgen -W "$opts" -- "$cur" )
        return 0
    }
    complete -F __ssh_host_completion ssh
fi

open() {
    if [ "$__os_family" = "Cygwin" ]; then
        #/cygdrive/c/WINDOWS/explorer.exe /e, `cygpath -w "$1"`
        cygstart "$@"
    elif [ "$__os_family" = "Linux" ]; then
        if command -v rifle &>/dev/null; then
            local text_files=()
            for x in "$@"; do
                [ -e "$x" ] || continue
                if [[ $(rifle -l "$x" | head -1) =~ ^0:editor:: ]]; then
                    text_files+=("$x")
                else
                    rifle -- "$x" &>/dev/null &
                fi
            done
            if (( ${#text_files[@]} > 0 )); then
                rifle "${text_files[@]}"
            fi
        else
            for x in "$@"; do
                xdg-open "$x"
            done
        fi
    else
        command open "$@"
    fi
} 2>/dev/null

echoline() {
    if [ "$#" -ne 2 ]; then
        echo 1>&2 "Echo specific file line"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    if [ ! -f "$1" ]; then
        echo 1>&2 "File not found: $1"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    if [[ ! "$2" =~ ^[0-9]+$ ]]; then
        echo 1>&2 "Invalid line number: $2"
        echo 1>&2 "Usage: ${FUNCNAME[0]} FILE LINE_NUM"
        return 1
    fi
    sed "${2}q;d" "$1"
}

mkcd() {
    if [ "$#" -ne 1 ]; then
        echo 1>&2 "Make dir and move into it"
        echo 1>&2 "Usage: ${FUNCNAME[0]} DIR_NAME"
        return 1
    fi
    mkdir "$1" || return
    cd "$1" || return
}

# {{{ Subversion

sup() { svn up "$@"; }

sst() { svn st "$@"; }

sdiff() {
    svn diff -x -w -x --ignore-eol-style "$@" | vim -R -n - +"file svn-diff" -c "set nowrap"
}

ssync() {
    svn diff -r BASE:HEAD "$@" | vim -R -n - +"file svn-sync" -c "set nowrap"
}

svnstash() {
    if [ "$#" -lt 1 ]; then
        echo "Print current developments patch"
        echo "Usage: ${FUNCNAME[0]} PATH..."
        return 1
    fi
    local unversioned
    unversioned=$(svn status "$@" | grep "^?" | sed -r 's/^\? +//')

    if [ -n "$unversioned" ]; then
        local tmp_file
        tmp_file=$(mktemp --tmpdir)
        echo "Created temp file $tmp_file" 1>&2
        # logging unversioned files to tmp_file
        echo "$unversioned" > "$tmp_file"
        # adding unversioned files
        xargs -r -d '\n' svn add < "$tmp_file" 1>&2
    fi

    svn diff "$@"

    if [ -s "$tmp_file" ]; then
        # removing unversioned files
        xargs -r -d '\n' svn delete --keep-local < "$tmp_file" 1>&2
        # clean
        rm -f "$tmp_file"
        echo "Temp file removed" 1>&2
    fi
}

svnhistory() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH"
        return 1
    fi
    local url
    url="$1"
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -n | {
        # first revision as full text
        read -r r
        svn log -r"$r" "$url"@HEAD
        svn cat -r"$r" "$url"@HEAD
        while read -r r; do
            echo
            svn log --diff -r"$r" "$url"@HEAD
        done
    }
}

ssvnhistory() {
    local add="[0;38;5;74m" rem="[0;38;5;167m" head="[1;38;5;228m" \
          rev="[1;38;5;244m" reset="[0m" esc
    esc=$(printf '\033')
    svnhistory "$@" | sed -r -e "s/^(\+([^+].*))$/$esc$add\1$esc$reset/" \
                             -e "s/^(-([^-].*))$/$esc$rem\1$esc$reset/" \
                             -e "s/^(@@ .+ @@)(.*)$/$esc$rev\1$esc$reset\2/" \
                             -e "s/^([+-]{3} .+|-{4,}|=+)$/$esc$head\1$esc$reset/"
}

svnhistoryr() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} PATH"
        return 1
    fi
    local url first
    url="$1"
    first=$(svn log -r 1:HEAD --limit 1 -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2-)
    if [ ! "$first" ]; then
        return 1
    fi
    svn log -q "$url" | "grep" -E -e "^r[[:digit:]]+" -o | cut -c2- | sort -rn | {
        while read -r r; do
            echo
            if [ "$r" == "$first" ]; then
                # first revision as full text
                svn log -r"$r" "$url"@HEAD
                svn cat -r"$r" "$url"@HEAD
            else
                svn log --diff -r"$r" "$url"@HEAD
            fi
        done
    }
}

ssvnhistoryr() {
    local add="[0;38;5;74m" rem="[0;38;5;167m" head="[1;38;5;228m" \
          rev="[1;38;5;244m" reset="[0m" esc
    esc=$(printf '\033')
    svnhistoryr "$@" | sed -r -e "s/^(\+([^+].*))$/$esc$add\1$esc$reset/" \
                              -e "s/^(-([^-].*))$/$esc$rem\1$esc$reset/" \
                              -e "s/^(@@ .+ @@)(.*)$/$esc$rev\1$esc$reset\2/" \
                              -e "s/^([+-]{3} .+|-{4,}|=+)$/$esc$head\1$esc$reset/"
}

svnactivity() {
    if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
        echo "Print the last NUM commits"
        echo "Usage: ${FUNCNAME[0]} USERNAME NUM [PATH]"
        return 1
    fi
    local committername="$1" numcommit="$2" pagesize=200 svnpath revisions \
          high low
    svnpath=$(pwd)
    if [ "$#" -eq 3 ]; then
        svnpath="$3"
    fi
    local -a commits
    high=$(svn info "$svnpath" | "grep" "Last Changed Rev" | "grep" -E -o '[0-9]+')
    if [ ! "$high" ]; then
        return 1
    fi
    while [ ${#commits[@]} -lt "$numcommit" ] && [ "$high" -ge 0 ]; do
        low=$((high - pagesize))
        if [ $low -lt 0 ]; then # TODO check lower than 0
            low=0
        fi
        revisions=$(svn log -q -r "$high":"$low" "$svnpath" | "grep" "$committername" | "grep" -E -o '^r[0-9]+')
        for r in $revisions; do
            commits+=("$r")
        done
        high=$((low - 1))
    done
    for i in $(seq "$numcommit" 1 ${#commits[@]}); do
        unset "commits[$i]"
    done
    # TODO reverse commit array
    echo "Found commits: ${commits[*]}"
    # shellcheck disable=SC2048
    for c in ${commits[*]}; do
        svn log -"$c" --diff "$svnpath"
    done
}

ssvnactivity() {
    local add="\o33\[0;38;5;110m" rem="\o33\[0;38;5;167m" \
          head="\o33\[0;38;5;228m" rev="\o33\[1;38;5;244m" reset="\o33[0m"
    svnactivity "$@" | sed -r -e "s/^(\+([^+].*|))$/$add\1$reset/" \
                              -e "s/^(-([^-].*|))$/$rem\1$reset/" \
                              -e "s/^(@@ .+ @@)(.*)$/$rev\1$reset\2/" \
                              -e "s/^([+-]{3} .+|-{4,}|=+)$/$head\1$reset/"
}

# }}}

# {{{ Git

gst() { git status "$@"; }

gunstage() { git restore --staged "$@"; }

# }}}

ff() {
    local grep_pattern
    if [ "$#" -eq 0 ]; then
        # current directory
        find . -type f -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n
    elif [ "$#" -eq 1 ]; then
        if [ -d "$1" ]; then
            # directory
            >&2 echo "Listing files in dir $1"
            find "$1" -type f -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n
        elif [ "$1" == "-t" ]; then
            find . -type f -exec sh -c 'ls -lrht "$@"' -- "{}" \+
        else
            grep_pattern=$(sed -r 's/\*+/.*/g' <<< "$1")
            find . -type f -iname '*'"$1"'*' -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n | grep -E -i "$grep_pattern"
        fi
    elif [ "$#" -eq 2 ]; then
        if [ "$1" == "-t" ]; then
            if [ ! -d "$2" ]; then
                >&2 echo "Target path is not a directory: $2"
                return 1
            fi
            find "$2" -type f -exec sh -c 'ls -lrht "$@"' -- "{}" \+
        elif [ ! -d "$1" ]; then
            >&2 echo "Target path is not a directory: $1"
            return 1
        else
            grep_pattern=$(sed -r 's/\*+/.*/g' <<< "$2")
            find "$1" -type f -iname '*'"$2"'*' -exec sh -c 'ls -lh "$@"' -- "{}" \+ | cat -n | grep -E -i "$grep_pattern"
        fi
    else
        >&2 echo "Too many arguments"
        return 1
    fi
}

fd() {
    if [ "$#" -eq 0 ]; then
        find . -type d | cat -n
    elif [ "$#" -eq 1 ]; then
        find . -type d -iname '*'"$1"'*' | cat -n | grep -i "$1"
    elif [ "$#" -eq 2 ]; then
        if [ ! -d "$1" ]; then
            >&2 echo "Target path is not a directory: $1"
            return 1
        fi
        find "$1" -type d -iname '*'"$2"'*' | cat -n | grep -i "$2"
    elif [ "$#" -gt 2 ]; then
        >&2 echo "Too many arguments"
        return 1
    fi
}

rmalljarsign() {
    local file
    for file in *jar; do
        echo "$file"
        zip -d "$file" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

rmjarsign() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: ${FUNCNAME[0]} JAR_FILE..."
        return 1
    fi
    local jarfile
    for jarfile in "$@"; do
        if [ ! -f "$jarfile" ]; then
            echo "File $jarfile does not exist"
            continue
        fi
        zip -d "$jarfile" 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'
    done
}

xml() {
    xmllint --format "$1" | pygmentize -l xml | less
}

colortest() {
    local clbg attr
    for clbg in {40..47} {100..107} 49 ; do
        # foreground
        for clfg in {30..37} {90..97} 39 ; do
            # formatting
            for attr in 0 1 2 4 5 7 ; do
                # print the result
                echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
            done
            echo
        done
    done
}

colortest256() {
    local fgbg color idx count
    for fgbg in 38 48; do
        idx=0 count=8
        for color in {0..255}; do
            # TODO fix fg if color in 7,15,[190,195],[226,231],[254,255]
            echo -en "\e[${fgbg};5;${color}m ${color} "
            printf '%*s' $((3 - ${#color})) ''
            echo -en "\e[0m "
            if (( color > 15 )); then
                count=12
            fi
            if [ $(((idx + 1) % count)) == 0 ]; then
                echo
            fi
            case $color in
                15|231)
                    echo;
                    idx=0
                    ;;
                *)
                    idx=$((idx + 1))
            esac
        done
        if [ $fgbg -eq 38 ]; then
            printf '\n\n'
        elif (( fgbg != 48 || color != 255 )); then
            echo
        fi
    done
}

colordiff() {
    local add="[0;38;5;74m" rem="[0;38;5;167m" head="[1;38;5;228m" \
          rev="[1;38;5;244m" reset="[0m" diff esc separator
    esc=$(printf '\033')
    while read -r line; do
        diff=$diff$separator$(sed -r -e "s/^(\+([^+].*))$/$esc$add\1$esc$reset/" \
                                     -e "s/^(-([^-].*))$/$esc$rem\1$esc$reset/" \
                                     -e "s/^(@@ .+ @@)(.*)$/$esc$rev\1$esc$reset\2/" \
                                     -e "s/^([+-]{3} .+|-{4,}|=+)$/$esc$head\1$esc$reset/" <<< "$line")
        separator="\n"
    done
    echo -e "$diff"
}

gradle_dependencies() {
    if [ ! -x gradlew ]; then
        echo "gradlew not found" >&2
        return 1
    fi
    if [[ -n "$1" ]] && [[ ! "$1" =~ ^[^/]+/?$ ]]; then
        echo "Invalid subproject" >&2
        return 1
    fi
    local subproject
    [[ -z "$1" ]] && subproject="" || subproject=$(tr -d '/' <<< "$1:")
    if command -v pygmentize &>/dev/null; then
        pygmentize <<< "$(./gradlew "$subproject"dependencies --configuration runtimeClasspath)" 2> /dev/null | less
    else
        ./gradlew "$subproject"dependencies --configuration runtimeClasspath 2> /dev/null | less
    fi
}

urlencode() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} STRING"
        return 1
    fi
    python3 -c "import urllib.parse;import sys;print(urllib.parse.quote_plus('${1//\'/\\\'}'))"
}

urldecode() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} STRING"
        return 1
    fi
    python3 -c "import urllib.parse;import sys;print(urllib.parse.unquote('${1//\'/\\\'}'))"
}
